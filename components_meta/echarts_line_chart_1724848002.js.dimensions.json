{
    "id": "echarts_line_chart_1724848002",
    "name": "echarts_line_chart",
    "type": "containerComponent",
    "metadata": {
        "markdownText": "<!--\nINSTRUCTION: To add this component to the user's app, you must follow these steps:\nINSTRUCTION: - You are given the correct SQL statement -- replace the `PLACEHOLDER_SQL_STATEMENT` variable in this file with the actual SQL statement.\n-->\n\n<template>\n    <div style=\"display: flex; justify-content: center;\">\n        <div id=\"line-chart\" style=\"width: 100vw; height: 50vh;\"></div>\n    </div>\n</template>\n\n<script>\nexport default {\n    name: 'EchartsLineChart',\n    data() {\n        return {\n            tableItems: [],\n            tableHeaders: [],\n            SQL_statement: 'PLACEHOLDER_SQL_STATEMENT',\n        }\n    },\n    mounted() {\n        this.fetchDataFromDatabase(this.SQL_statement)\n            .then(([tableHeaders, tableItems]) => {\n                this.tableHeaders = tableHeaders;\n                this.tableItems = tableItems;\n                this.prepareDataForLineChart(tableHeaders, tableItems)\n                    .then(chartData => {\n                        this.renderLineChart(chartData);\n                    });\n            });\n    },\n    methods: {\n        fetchDataFromDatabase(SQL_statement) {\n            return axios.post('https://nl2sql-prod.azurewebsites.net/execute_sql', { query: SQL_statement })\n                .then(response => {\n                    const tableItems = response.data.result;\n                    if (tableItems.length > 0) {\n                        const tableHeaders = Object.keys(tableItems[0]);\n                        this.tableItems = tableItems;\n                        this.tableHeaders = tableHeaders;\n                        return [tableHeaders, tableItems];\n                    }\n                });\n        },\n        prepareDataForLineChart(tableHeaders, tableItems) {\n            return new Promise((resolve) => {\n                let xAxisData = [];\n                let yAxisData = [];\n                let xAxisCandidate = null;\n                let yAxisCandidate = null;\n\n                for (let header of tableHeaders) {\n                    let hasNonEmptyStringValues = tableItems.some(item => typeof item[header] === \"string\" && item[header] !== \"\" && !item[header].startsWith('{') && \n                        !item[header].startsWith('(') && !item[header].startsWith('['));\n                    if (hasNonEmptyStringValues) {\n                        xAxisCandidate = header;\n                        console.log('X-axis candidate:', xAxisCandidate);\n                        break;\n                    }\n                }\n\n                if (!xAxisCandidate) {\n                    console.log('Unable to find suitable X-axis data. Returning empty chart data.');\n                    resolve({ xAxisCandidate: null, yAxisCandidate: null, xAxisData: [], yAxisData: [] });\n                    return;\n                }\n\n                xAxisData = tableItems.map(item => {\n                    let value = item[xAxisCandidate];\n                    if (typeof value === \"string\" && !value.startsWith('{')) {\n                        return value;\n                    } else {\n                        console.log(`Skipping value \"${value}\" for X-axis data.`);\n                        return null;\n                    }\n                }).filter(value => value !== null);\n\n                for (let header of tableHeaders) {\n                    if (header !== xAxisCandidate) {\n                        let hasNumericOrParsableValues = tableItems.some(item => {\n                            let value = item[header];\n                            return typeof value === \"number\" || (typeof value === \"string\" && !isNaN(parseFloat(value)) && !value.startsWith('0x'));\n                        });\n                        if (hasNumericOrParsableValues) {\n                            yAxisCandidate = header;\n                            console.log('Y-axis candidate:', yAxisCandidate);\n                            break;\n                        }\n                    }\n                }\n\n                if (!yAxisCandidate) {\n                    console.log('Unable to find suitable Y-axis data. Returning empty chart data.');\n                    resolve({ xAxisCandidate: null, yAxisCandidate: null, xAxisData: [], yAxisData: [] });\n                    return;\n                }\n\n                for (let item of tableItems) {\n                    let yValue = item[yAxisCandidate];\n                    if (typeof yValue === \"number\") {\n                        yAxisData.push(yValue);\n                        console.log(`Adding numeric value ${yValue} to Y-axis data.`);\n                    } else if (typeof yValue === \"string\" && !isNaN(parseFloat(yValue)) && !yValue.startsWith('0x')) {\n                        let parsedValue = parseFloat(yValue);\n                        yAxisData.push(parsedValue);\n                        console.log(`Adding parsed value ${parsedValue} to Y-axis data.`);\n                    } else {\n                        console.log(`Skipping value ${yValue} for Y-axis data.`);\n                    }\n                }\n\n                resolve({ xAxisData, yAxisData, xAxisCandidate, yAxisCandidate, \n                         seriesData: [{ type: 'line', data: yAxisData }] });\n            });\n        },\n        renderLineChart(chartData) {\n            let lineChart = echarts.init(document.getElementById('line-chart'), 'dark');\n\n            let option = {\n                grid: { containLabel: true },\n                xAxis: { type: 'category', data: chartData.xAxisData, name: chartData.xAxisCandidate, nameLocation: 'center', axisLabel: { margin: 60 } },\n                yAxis: { type: 'value', name: chartData.yAxisCandidate, nameLocation: 'middle', axisLabel: { margin: 60 } },\n                tooltip: { trigger: 'axis', axisPointer: { type: 'cross' } },\n                series: chartData.seriesData\n            };\n\n            lineChart.setOption(option);\n        }\n    }\n}\n</script>\n\n<style scoped>\n</style>\n"
    },
    "w": 7,
    "h": 7,
    "x": 5,
    "y": 8,
    "i": "5",
    "minW": 3,
    "maxW": 12,
    "minH": 1,
    "moved": false,
    "static": false,
    "isDraggable": true,
    "isResizable": true
}